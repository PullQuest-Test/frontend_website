# .github/workflows/pullquest-pr-comment.yml
name: PullQuest ‚Äì comment on PR activity
on:
  pull_request:
    # opened ‚Üí first creation
    # reopened / ready_for_review ‚Üí drafts becoming ready
    # synchronize ‚Üí a new commit pushed to the PR
    types: [opened, reopened, ready_for_review, synchronize]
    branches: [main]
jobs:
  notify-pullquest:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write       # needed only if you later update the PR status
    env:
      BACKEND_URL: https://pullquestgithubbackend.onrender.com
      OPENAI_API_KEY: pullquesttestzx7tehs
    steps:
      - name: Debug ‚Äì print event info
        run: |
          echo "üîç PR #      : ${{ github.event.pull_request.number }}"
          echo "üîç Title     : ${{ github.event.pull_request.title }}"
          echo "üîç Author    : ${{ github.event.pull_request.user.login }}"
          echo "üîç Event     : ${{ github.event.action }}"
          echo "üîç Repo      : ${{ github.event.repository.full_name }}"
      
      - name: Build payload ‚ûú POST to backend
        id: pullquest-notify
        run: |
          NUMBER=${{ github.event.pull_request.number }}
          AUTHOR=${{ github.event.pull_request.user.login }}
          DESCRIPTION="${{ github.event.pull_request.body || '' }}"
          # JSON array of label names
          LABELS=$(jq '.pull_request.labels | map(.name)' "$GITHUB_EVENT_PATH")
          # Assemble payload
          payload=$(jq -n \
            --arg owner  "${{ github.event.repository.owner.login }}" \
            --arg repo   "${{ github.event.repository.name }}" \
            --arg author "$AUTHOR" \
            --arg desc   "$DESCRIPTION" \
            --argjson prNumber "$NUMBER" \
            --argjson labels   "$LABELS" \
            '{owner:$owner, repo:$repo, prNumber:$prNumber, author:$author, description:$desc, labels:$labels}')
          echo "üì¶ Payload:"
          echo "$payload"
          
          # Make request with better error handling
          if response=$(curl --fail --show-error --silent \
            -X POST "$BACKEND_URL/api/comment/PullRequest" \
            -H "Content-Type: application/json" \
            --data-raw "$payload" \
            -w '\nHTTP %{http_code}\n' 2>&1); then
            echo "üîç Response: $response"
            echo "pullquest_success=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå PullQuest notification failed: $response"
            echo "pullquest_success=false" >> $GITHUB_OUTPUT
            # Don't fail the entire workflow, just log the error
          fi
      
      - name: Generate PR Summary ‚ûú POST to backend
        id: pr-summary
        # Only run if it's a new PR or reopened (not on every sync)
        if: github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'ready_for_review'
        run: |
          NUMBER=${{ github.event.pull_request.number }}
          TITLE="${{ github.event.pull_request.title }}"
          DESCRIPTION="${{ github.event.pull_request.body || '' }}"
          
          echo "üìù Generating AI summary for PR #$NUMBER"
          
          # Assemble summary payload
          summary_payload=$(jq -n \
            --arg owner  "${{ github.event.repository.owner.login }}" \
            --arg repo   "${{ github.event.repository.name }}" \
            --arg title  "$TITLE" \
            --arg desc   "$DESCRIPTION" \
            --argjson prNumber "$NUMBER" \
            --arg openaiApiKey "$OPENAI_API_KEY" \
            '{owner:$owner, repo:$repo, prNumber:$prNumber, title:$title, description:$desc, openaiApiKey:$openaiApiKey}')
          
          echo "üì¶ Summary Payload:"
          echo "$summary_payload"
          
          # Make request with better error handling
          if summary_response=$(curl --fail --show-error --silent \
            -X POST "$BACKEND_URL/api/github/generate-pr-summary" \
            -H "Content-Type: application/json" \
            --data-raw "$summary_payload" \
            -w '\nHTTP %{http_code}\n' 2>&1); then
            echo "üîç Summary Response: $summary_response"
            echo "summary_success=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå PR summary generation failed: $summary_response"
            echo "summary_success=false" >> $GITHUB_OUTPUT
            # Don't fail the entire workflow, just log the error
          fi
      
      - name: Generate AI Code Review ‚ûú POST to backend
        id: ai-review
        # Only run on opened or synchronized (new code to review)
        if: github.event.action == 'opened' || github.event.action == 'synchronize'
        run: |
          NUMBER=${{ github.event.pull_request.number }}
          
          echo "ü§ñ Generating AI code review for PR #$NUMBER"
          
          # Get the diff for the PR
          DIFF_URL="${{ github.event.pull_request.diff_url }}"
          
          # Assemble review payload
          review_payload=$(jq -n \
            --arg owner  "${{ github.event.repository.owner.login }}" \
            --arg repo   "${{ github.event.repository.name }}" \
            --argjson prNumber "$NUMBER" \
            --arg diffUrl "$DIFF_URL" \
            '{owner:$owner, repo:$repo, prNumber:$prNumber, diff:""}')
          
          echo "üì¶ Review Payload:"
          echo "$review_payload"
          
          # Make request with better error handling
          if review_response=$(curl --fail --show-error --silent \
            -X POST "$BACKEND_URL/api/github/ai-review" \
            -H "Content-Type: application/json" \
            --data-raw "$review_payload" \
            -w '\nHTTP %{http_code}\n' 2>&1); then
            echo "üîç Review Response: $review_response"
            echo "review_success=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå AI code review failed: $review_response"
            echo "review_success=false" >> $GITHUB_OUTPUT
            # Don't fail the entire workflow, just log the error
          fi
      
      - name: Summary Report
        run: |
          echo "üìä Workflow Summary:"
          echo "‚úÖ PullQuest notification: ${{ steps.pullquest-notify.outputs.pullquest_success }}"
          
          if [ "${{ github.event.action }}" = "opened" ] || [ "${{ github.event.action }}" = "reopened" ] || [ "${{ github.event.action }}" = "ready_for_review" ]; then
            echo "‚úÖ PR summary generation: ${{ steps.pr-summary.outputs.summary_success }}"
          else
            echo "‚è≠Ô∏è PR summary: Skipped (not needed for ${{ github.event.action }})"
          fi
          
          if [ "${{ github.event.action }}" = "opened" ] || [ "${{ github.event.action }}" = "synchronize" ]; then
            echo "‚úÖ AI code review: ${{ steps.ai-review.outputs.review_success }}"
          else
            echo "‚è≠Ô∏è AI code review: Skipped (not needed for ${{ github.event.action }})"
          fi
          
          echo "üéØ All operations completed!"
